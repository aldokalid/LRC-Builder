package lrcbuilder;

import java.awt.event.ActionEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JMenuItem;
import javax.swing.table.DefaultTableModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JSeparator;

/**
 * User Interface.
 *
 * @author Aldo Kalid Hern√°ndez Camarena
 */
public class UI extends javax.swing.JFrame {

    private int selRow;
    private final SoundPlayer sP;
    private MP3Decoder mD;
    private final TimeUpdater timer;
    private boolean sliderMoved = false;

    public UI(int windowState) {
        selRow = Global.NO_INDEX;
        sP = new SoundPlayer();
        mD = null;
        initComponents();

        timer = new TimeUpdater(timeSld);
        this.setExtendedState(windowState);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tiTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        alTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        arTxt = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        lyricsTbl = new javax.swing.JTable();
        addBtn = new javax.swing.JButton();
        paTxt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        playPauseBtn = new javax.swing.JButton();
        stopBtn = new javax.swing.JButton();
        insertBtn = new javax.swing.JButton();
        timeSld = new javax.swing.JSlider();
        actualTimeLbl = new javax.swing.JLabel();
        endTimeLbl = new javax.swing.JLabel();
        volSld = new javax.swing.JSlider();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        delayTxt = new javax.swing.JTextField();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        loadItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        importItem = new javax.swing.JMenuItem();
        saveItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        settingsItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        verItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("LRC Builder");
        setIconImage(new ImageIcon(getClass().getResource(Global.ICON_APP)).getImage());
        setMinimumSize(new java.awt.Dimension(726, 497));
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                formWindowStateChanged(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Archive data");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Tittle");

        tiTxt.setEditable(false);
        tiTxt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tiTxt.setText(Global.NO_FILE_DEFAULT_TEXT);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Album");

        alTxt.setEditable(false);
        alTxt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        alTxt.setText(Global.NO_FILE_DEFAULT_TEXT);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Artist");

        arTxt.setEditable(false);
        arTxt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        arTxt.setText(Global.NO_FILE_DEFAULT_TEXT);

        lyricsTbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lyricsTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Time", "Lyrics"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        lyricsTbl.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lyricsTbl.setShowGrid(true);
        lyricsTbl.getTableHeader().setReorderingAllowed(false);
        lyricsTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lyricsTblMouseClicked(evt);
            }
        });
        lyricsTbl.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lyricsTblKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(lyricsTbl);
        if (lyricsTbl.getColumnModel().getColumnCount() > 0) {
            lyricsTbl.getColumnModel().getColumn(0).setMinWidth(80);
            lyricsTbl.getColumnModel().getColumn(0).setPreferredWidth(80);
            lyricsTbl.getColumnModel().getColumn(0).setMaxWidth(80);
        }

        addBtn.setBackground(null);
        addBtn.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        addBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icon/add.png"))); // NOI18N
        addBtn.setToolTipText("Load a song first");
        addBtn.setBorderPainted(false);
        addBtn.setEnabled(false);
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        paTxt.setEditable(false);
        paTxt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        paTxt.setText(Global.NO_FILE_DEFAULT_TEXT);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("File path");

        playPauseBtn.setBackground(null);
        playPauseBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icon/play.png"))); // NOI18N
        playPauseBtn.setToolTipText("Load a song first.");
        playPauseBtn.setBorderPainted(false);
        playPauseBtn.setEnabled(false);
        playPauseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playPauseBtnActionPerformed(evt);
            }
        });

        stopBtn.setBackground(null);
        stopBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icon/stop.png"))); // NOI18N
        stopBtn.setToolTipText("Load a song first.");
        stopBtn.setBorderPainted(false);
        stopBtn.setEnabled(false);
        stopBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopBtnActionPerformed(evt);
            }
        });

        insertBtn.setBackground(null);
        insertBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icon/set.png"))); // NOI18N
        insertBtn.setToolTipText("A song must be playing.");
        insertBtn.setBorderPainted(false);
        insertBtn.setEnabled(false);
        insertBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertBtnActionPerformed(evt);
            }
        });

        timeSld.setToolTipText("Load a song first.");
        timeSld.setValue(0);
        timeSld.setEnabled(false);
        timeSld.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                timeSldStateChanged(evt);
            }
        });
        timeSld.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                timeSldMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                timeSldMouseReleased(evt);
            }
        });

        actualTimeLbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        actualTimeLbl.setText("00:00.00");
        actualTimeLbl.setToolTipText("");
        actualTimeLbl.setEnabled(false);

        endTimeLbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        endTimeLbl.setText("00:00.00");
        endTimeLbl.setToolTipText("");
        endTimeLbl.setEnabled(false);

        volSld.setValue(100);
        volSld.setMaximumSize(new java.awt.Dimension(100, 26));
        volSld.setMinimumSize(new java.awt.Dimension(36, 26));
        volSld.setPreferredSize(new java.awt.Dimension(200, 26));
        volSld.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                volSldStateChanged(evt);
            }
        });

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icon/vol_down.png"))); // NOI18N
        jLabel8.setMaximumSize(new java.awt.Dimension(15, 26));
        jLabel8.setMinimumSize(new java.awt.Dimension(15, 26));
        jLabel8.setPreferredSize(new java.awt.Dimension(15, 26));

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icon/vol_up.png"))); // NOI18N
        jLabel9.setMaximumSize(new java.awt.Dimension(15, 26));
        jLabel9.setMinimumSize(new java.awt.Dimension(15, 26));
        jLabel9.setPreferredSize(new java.awt.Dimension(15, 26));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icon/quest.png"))); // NOI18N
        jLabel6.setText("Delay");
        jLabel6.setToolTipText("Adjust this number (0 - 20) to configure the delay produced when\nmoving the time song slider. This value won't do anything if you\ndon't move the time song slider (play / stop buttons doesn't count\nas moving the slider).");

        delayTxt.setColumns(1);
        delayTxt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        delayTxt.setText(String.valueOf(Global.DEFAULT_DELAY));
        delayTxt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                delayTxtFocusLost(evt);
            }
        });

        fileMenu.setText("File");

        loadItem.setText("Load file");
        loadItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadItem);
        fileMenu.add(jSeparator1);

        importItem.setText("Import lyrics");
        importItem.setToolTipText("Load a song first.");
        importItem.setEnabled(false);
        importItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importItemActionPerformed(evt);
            }
        });
        fileMenu.add(importItem);

        saveItem.setText("Save as LRC file");
        saveItem.setToolTipText("Table must not be empty.");
        saveItem.setEnabled(false);
        saveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveItem);
        fileMenu.add(jSeparator2);

        settingsItem.setText("Settings");
        settingsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsItemActionPerformed(evt);
            }
        });
        fileMenu.add(settingsItem);
        fileMenu.add(jSeparator3);

        verItem.setText("Ver. " + Global.APP_VER);
        verItem.setEnabled(false);
        fileMenu.add(verItem);

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(paTxt)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(delayTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(tiTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(alTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(arTxt))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(insertBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(playPauseBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(stopBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(actualTimeLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(timeSld, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(endTimeLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(volSld, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tiTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(alTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(arTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(paTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(delayTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(volSld, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(addBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(insertBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(playPauseBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(stopBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(actualTimeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(timeSld, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(endTimeLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    // <editor-fold defaultstate="collapsed" desc="Own methods">
    private int getEqualValue() {
        double percent = (double) timeSld.getValue() / (double) timeSld.getMaximum();
        int position = (int) ((double) sP.getSongSize() * percent) + (SoundPlayer.DELAY_ADITION
                * (sliderMoved ? Integer.parseInt(delayTxt.getText()) : 1));
        return position;
    }

    private void updateUI() {
        paTxt.setText(sP.getPath().isEmpty() ? Global.NO_FILE_DEFAULT_TEXT : sP.getPath());

        if (sP.isOpen()) {
            playPauseBtn.setEnabled(true);
            playPauseBtn.setToolTipText("Play / Pause");
            stopBtn.setEnabled(true);
            stopBtn.setToolTipText("Stop");
            endTimeLbl.setText(Global.toTime(mD.getDuration()).toString());
            timeSld.setMaximum((int) mD.getDuration());
            timeSld.setValue(0);
            timeSld.setEnabled(true);
            timeSld.setToolTipText("");
            actualTimeLbl.setEnabled(true);
            endTimeLbl.setEnabled(true);
        }

        if (mD != null) {
            tiTxt.setText(mD.getName());
            alTxt.setText(mD.getAlbum());
            arTxt.setText(mD.getArtist());
        } else {
            tiTxt.setText("NO TAG DETECTED");
            alTxt.setText("NO TAG DETECTED");
            arTxt.setText("NO TAG DETECTED");
        }

        // Removing rows.
        DefaultTableModel m = (DefaultTableModel) lyricsTbl.getModel();
        int count = lyricsTbl.getRowCount();

        for (int i = 0; i < count; i++) {
            m.removeRow(0);
        }

        lyricsTbl.clearSelection();
        selRow = Global.NO_INDEX;
        importItem.setEnabled(true);
        importItem.setToolTipText("");
        addBtn.setEnabled(true);
        addBtn.setToolTipText("Add a new row at the end of the table.");
    }

    private void addRowOverOf(int row) {
        DefaultTableModel m = (DefaultTableModel) lyricsTbl.getModel();
        lyricsTbl.clearSelection();
        selRow = Global.NO_INDEX;
    }

    private void addRowUderOf(int row) {
        DefaultTableModel m = (DefaultTableModel) lyricsTbl.getModel();
        lyricsTbl.clearSelection();
        selRow = Global.NO_INDEX;
    }

    private void combineWithRowOverOf(int row) {
        String val = (String) lyricsTbl.getValueAt(row, 1);
        String newVal = (String) lyricsTbl.getValueAt(row - 1, 1);
        newVal = newVal.concat(" ").concat(val);
        lyricsTbl.setValueAt(newVal, row - 1, 1);
        removeRow(row);
        lyricsTbl.setRowSelectionInterval(row - 1, row - 1);
        selRow = row - 1;
    }

    private void combineWithRowUnderOf(int row) {
        String val = (String) lyricsTbl.getValueAt(row, 1);
        String newVal = (String) lyricsTbl.getValueAt(row + 1, 1);
        newVal = val.concat(" ").concat(newVal);
        lyricsTbl.setValueAt(newVal, row + 1, 1);
        removeRow(row);
        lyricsTbl.setRowSelectionInterval(row, row);
        selRow = row;
    }

    private void removeRow(int row) {
        // Updating table.
        DefaultTableModel m = (DefaultTableModel) lyricsTbl.getModel();
        m.removeRow(row);
        lyricsTbl.clearSelection();
        selRow = Global.NO_INDEX;

        if (lyricsTbl.getRowCount() <= 0) {
            saveItem.setEnabled(false);
            saveItem.setToolTipText("Table must not be empty.");
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Events">
    private void lyricsTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lyricsTblMouseClicked
        int rowSelected = lyricsTbl.rowAtPoint(evt.getPoint());
        lyricsTbl.setRowSelectionInterval(rowSelected, rowSelected);

        if (evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
            if (!sP.isPlaying()) {
                // Right click.
                // <editor-fold defaultstate="collapsed" desc="Creating JPopupMenu">
                JPopupMenu popupMenu = new JPopupMenu();
                ArrayList<java.awt.Component> popUpComponents = new ArrayList<>();
                JMenuItem item = new JMenuItem("Add over selection");
                item.addActionListener((ActionEvent e) -> {
                    addRowOverOf(rowSelected);
                });
                popUpComponents.add(item);
                item = new JMenuItem("Add under selection");
                item.addActionListener((ActionEvent e) -> {
                    addRowUderOf(rowSelected);
                });
                popUpComponents.add(item);
                popUpComponents.add(new JSeparator());

                if (selRow > 0 || selRow < lyricsTbl.getRowCount() - 1) {
                    if (selRow > 0) {
                        item = new JMenuItem("Combine with row over of");
                        item.addActionListener((ActionEvent e) -> {
                            combineWithRowOverOf(selRow);
                        });
                        popUpComponents.add(item);
                    }

                    if (selRow < lyricsTbl.getRowCount() - 1) {
                        item = new JMenuItem("Combine with row under of");
                        item.addActionListener((ActionEvent e) -> {
                            combineWithRowUnderOf(selRow);
                        });
                        popUpComponents.add(item);
                    }

                    popUpComponents.add(new JSeparator());
                }

                item = new JMenuItem("Remove selection");
                item.addActionListener((ActionEvent e) -> {
                    removeRow(rowSelected);
                });
                popUpComponents.add(item);
                item = new JMenuItem("Clear selection");
                item.addActionListener((ActionEvent e) -> {
                    lyricsTbl.clearSelection();
                    selRow = -1;
                });
                popUpComponents.add(item);

                // Adding components;
                for (int i = 0; i < popUpComponents.size(); i++) {
                    popupMenu.add(popUpComponents.get(i));
                }
                // </editor-fold>

                // Showing JPopupMenu.
                popupMenu.show(lyricsTbl, evt.getX(), evt.getY());
            }
        } else if (selRow != rowSelected) {
            // Left click (first clic).
            selRow = rowSelected;

            if (selRow == lyricsTbl.getRowCount() - 1) {
                insertBtn.setEnabled(false);
                insertBtn.setToolTipText("End of lyrics reached.");
            } else if (sP.isPlaying()) {
                insertBtn.setEnabled(true);
                insertBtn.setToolTipText("Catch timer on next lyric.");
            }
        } else if (lyricsTbl.getSelectedColumn() == 0) {
            // Left click (second click on first column).
            Lyric l = new Lyric(Time.splitTime((String) lyricsTbl.getValueAt(selRow, 0)), "");
            new TimeEditor(this, true, l.getTime()).setVisible(true);

            if (l.getTime().getId() == Global.NO_ID) {
                lyricsTbl.setValueAt(l.getTime().toString(), selRow, 0);
            }
        }
    }//GEN-LAST:event_lyricsTblMouseClicked

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        DefaultTableModel m = (DefaultTableModel) lyricsTbl.getModel();
        m.insertRow(lyricsTbl.getRowCount(), new Object[]{"00:00.0", ""});
        saveItem.setEnabled(true);
        saveItem.setToolTipText("Export table to a LRC file.");
    }//GEN-LAST:event_addBtnActionPerformed

    private void importItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importItemActionPerformed
        ArrayList<Lyric> lyrics = new ArrayList<>();
        new LyricEditor(this, true, lyrics).setVisible(true);

        if (!lyrics.isEmpty()) {
            if (lyricsTbl.getRowCount() > 0) {
                int selection = JOptionPane.showOptionDialog(this, "The content "
                        + "stored in the table will be removed.",
                        "Removing lyrics...", 0, JOptionPane.WARNING_MESSAGE, null,
                        new Object[]{"Continue", "Cancel"}, 0);

                if (selection != 0) {
                    return;
                }
            }

            DefaultTableModel m = (DefaultTableModel) lyricsTbl.getModel();
            m.setRowCount(0);
            lyricsTbl.clearSelection();

            for (int i = 0; i < lyrics.size(); i++) {
                m.insertRow(i, new Object[]{lyrics.get(i).getTime().toString(), lyrics.get(i).getLyric()});
            }

            saveItem.setEnabled(true);
            saveItem.setToolTipText("Export lyrics to LRC file.");
        }
    }//GEN-LAST:event_importItemActionPerformed

    private void settingsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsItemActionPerformed
        new SettingsEditor(this, true).setVisible(true);
    }//GEN-LAST:event_settingsItemActionPerformed

    private void lyricsTblKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lyricsTblKeyReleased
        switch (evt.getKeyCode()) {
            case java.awt.event.KeyEvent.VK_UP:
            case java.awt.event.KeyEvent.VK_DOWN:
                selRow = lyricsTbl.getSelectedRow();
            default: {
                if (selRow != Global.NO_INDEX && !lyricsTbl.isEditing()) {
                    if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_DELETE) {
                        removeRow(selRow);
                    } else if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_INSERT) {
                        int selRow = this.selRow;
                        addRowUderOf(selRow);
                        this.selRow = selRow + 1;
                    }
                }
            }
        }
    }//GEN-LAST:event_lyricsTblKeyReleased

    private void formWindowStateChanged(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowStateChanged
        if (evt.getNewState() == 0 || evt.getNewState() == 6) {
            DAOIO<Setting> daoIO = new DAOIO<>(new Global().getFilePath(Global.SETTING_FILE));
            Setting s = daoIO.read();
            s.setWindowState(evt.getNewState());
            daoIO.write(s);
        }
    }//GEN-LAST:event_formWindowStateChanged

    private void loadItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadItemActionPerformed
        String path = Global.openFile(this, ".mp3", "MP3 files");

        if (path == null) {
            return;
        }

        mD = new MP3Decoder(path);
        mD.decode();

        sP.open(path);
        updateUI();
    }//GEN-LAST:event_loadItemActionPerformed

    private void playPauseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playPauseBtnActionPerformed
        if (!sP.isPlaying()) {
            if (timeSld.getValue() == timeSld.getMaximum()) {
                if (selRow == lyricsTbl.getRowCount() - 1) {
                    insertBtn.setEnabled(false);
                    insertBtn.setToolTipText("End of lyrics reached.");
                }

                timeSld.setValue(0);
                sP.play(0);
            } else {
                sP.play(sliderMoved ? getEqualValue()
                        : sP.getStopLocation());
                sliderMoved = false;
            }

            timer.startTimer();
            playPauseBtn.setIcon(new ImageIcon(getClass().getResource(Global.ICON_PAUSE)));
            insertBtn.setEnabled(true);
            insertBtn.setToolTipText("Catch timer on next lyric.");
            fileMenu.setEnabled(false);
            fileMenu.setToolTipText("Stop the song to enable.");
        } else {
            timer.stopTimer();
            sP.pause();
            playPauseBtn.setIcon(new ImageIcon(getClass().getResource(Global.ICON_PLAY)));
            insertBtn.setEnabled(false);
            insertBtn.setToolTipText("A song must be playing.");
            fileMenu.setEnabled(true);
            fileMenu.setToolTipText("");
        }
    }//GEN-LAST:event_playPauseBtnActionPerformed

    private void stopBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopBtnActionPerformed
        if (sP.isPlaying()) {
            timer.stopTimer();
            sP.stop();
            playPauseBtn.setIcon(new ImageIcon(getClass().getResource(Global.ICON_PLAY)));
            timeSld.setValue(0);
            insertBtn.setEnabled(false);
            insertBtn.setToolTipText("A song must be playing.");
            fileMenu.setEnabled(true);
            fileMenu.setToolTipText("");
        }
    }//GEN-LAST:event_stopBtnActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        sP.close();
        SoundControl.restoreVolume();
        RunAgent.deleteRunFile();
    }//GEN-LAST:event_formWindowClosing

    private void volSldStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_volSldStateChanged
        float f = (float) volSld.getValue() / 100;
        SoundControl.setVolume(f);
    }//GEN-LAST:event_volSldStateChanged

    private void insertBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertBtnActionPerformed
        if (lyricsTbl.getRowCount() > 0 && selRow < lyricsTbl.getRowCount() - 1) {
            selRow++;
            lyricsTbl.setRowSelectionInterval(selRow, selRow);
            lyricsTbl.changeSelection(selRow, 0, false, false);
            lyricsTbl.setValueAt(actualTimeLbl.getText(), selRow, 0);

            if (selRow == lyricsTbl.getRowCount() - 1) {
                insertBtn.setEnabled(false);
                insertBtn.setToolTipText("End of lyrics reached.");
            }
        }
    }//GEN-LAST:event_insertBtnActionPerformed

    private void timeSldStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_timeSldStateChanged
        actualTimeLbl.setText(Global.toTime(timeSld.getValue()).toString());

        if (!timeSld.getValueIsAdjusting() && timeSld.getValue() == timeSld.getMaximum()) {
            playPauseBtn.setIcon(new ImageIcon(getClass().getResource(Global.ICON_PLAY)));
            fileMenu.setEnabled(true);
            fileMenu.setToolTipText("");
        }
    }//GEN-LAST:event_timeSldStateChanged

    private void timeSldMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_timeSldMouseReleased
        if (sP.isPlaying()) {
            int pos = timeSld.getValue() == 0 ? 0 : getEqualValue();
            sP.stop();
            sP.play(pos);
            timer.startTimer();
            sliderMoved = timeSld.getValue() != 0;
        }
    }//GEN-LAST:event_timeSldMouseReleased

    private void timeSldMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_timeSldMousePressed
        sliderMoved = true;
        timer.stopTimer();
    }//GEN-LAST:event_timeSldMousePressed

    private void delayTxtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_delayTxtFocusLost
        if (!delayTxt.getText().isEmpty() && !Global.isNumber(delayTxt.getText())) {
            delayTxt.setText(String.valueOf(Global.DEFAULT_DELAY));
        } else if (Global.isNumber(delayTxt.getText())) {
            int val = Integer.parseInt(delayTxt.getText());

            if (val > 100) {
                delayTxt.setText(String.valueOf(Global.DEFAULT_DELAY));
            }
        }
    }//GEN-LAST:event_delayTxtFocusLost

    private void saveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveItemActionPerformed
        String path = Global.saveFile(this, ".lrc", "LRC files",
                (arTxt.getText() + " - " + tiTxt.getText() + ".lrc"));

        if (path == null) {
            return;
        }

        LRCArchive lrc = new LRCArchive(new java.io.File(path));

        try {
            lrc.open();

            if (new DAOIO<Setting>(new Global().getFilePath(Global.SETTING_FILE)).read().getSaveTags()) {
                lrc.writeLine("[ti:" + tiTxt.getText() + "]");
                lrc.writeLine("[ar:" + arTxt.getText() + "]");
                lrc.writeLine("[al:" + alTxt.getText() + "]");
            }

            for (int i = 0; i < lyricsTbl.getRowCount(); i++) {
                Time t = Time.splitTime((String) lyricsTbl.getValueAt(i, 0));
                Lyric l = new Lyric(t, (String) lyricsTbl.getValueAt(i, 1));
                lrc.writeLyric(l);
            }

            lrc.close();
        } catch (IOException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
            new Error("Lyrics could't be exported. " + ex.getMessage(), "Exeption error.").show(this);
        }
    }//GEN-LAST:event_saveItemActionPerformed
    // </editor-fold>

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel actualTimeLbl;
    private javax.swing.JButton addBtn;
    private javax.swing.JTextField alTxt;
    private javax.swing.JTextField arTxt;
    private javax.swing.JTextField delayTxt;
    private javax.swing.JLabel endTimeLbl;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem importItem;
    private javax.swing.JButton insertBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JMenuItem loadItem;
    private javax.swing.JTable lyricsTbl;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTextField paTxt;
    private javax.swing.JButton playPauseBtn;
    private javax.swing.JMenuItem saveItem;
    private javax.swing.JMenuItem settingsItem;
    private javax.swing.JButton stopBtn;
    private javax.swing.JTextField tiTxt;
    private javax.swing.JSlider timeSld;
    private javax.swing.JMenuItem verItem;
    private javax.swing.JSlider volSld;
    // End of variables declaration//GEN-END:variables
}
